var searchIndex = {};
searchIndex["piecetable"] = {"doc":"Implementation of a piece table based on a vector.\nA piece table provides efficient methods for inserting and removing elements sequentially, intended for use as the underlying data structure in a text editor.","items":[[3,"PieceTable","piecetable","The `PieceTable` type with all relevant methods.",null,null],[3,"Iter","","Struct for iterating the elements of a `PieceTable`.",null,null],[3,"Range","","Struct for iterating a range of elements in a `PieceTable`.",null,null],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"piecetable"}],"output":{"name":"piecetable"}}],[11,"fmt","","",0,{"inputs":[{"name":"piecetable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `PieceTable`",0,{"inputs":[],"output":{"name":"piecetable"}}],[11,"with_capacity","","Constructs a new, empty `PieceTable&lt;T&gt;` with the specified capacity for elements and pieces.\nSequential insertion of `data_capacity` elements will be possible without reallocation.\nScattered operations results in pieces being added; the created piece table will be able to store `piece_capacity` of these before reallocating.",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"piecetable"}}],[11,"src","","Assign a read-only source to an existing `PieceTable`.",0,null],[11,"len","","The number of elements stored in the piece table.",0,{"inputs":[{"name":"piecetable"}],"output":{"name":"usize"}}],[11,"is_empty","","",0,{"inputs":[{"name":"piecetable"}],"output":{"name":"bool"}}],[11,"capacity_data","","Returns the number of elements sequentially inserted the piece table can hold without reallocating.",0,{"inputs":[{"name":"piecetable"}],"output":{"name":"usize"}}],[11,"capacity_pieces","","Returns the number of pieces (created by scattered operations), the piece table can hold without reallocating.",0,{"inputs":[{"name":"piecetable"}],"output":{"name":"usize"}}],[11,"reserve_data","","Reserves capacity for at least `additional` more elements to be inserted.\nThe collection may reserve more space to avoid frequent reallocations.",0,{"inputs":[{"name":"piecetable"},{"name":"usize"}],"output":null}],[11,"reserve_piece","","Reserves capacity for at least `additional` more pieces to be created.\nThe collection may reserve more space to avoid frequent reallocations.",0,{"inputs":[{"name":"piecetable"},{"name":"usize"}],"output":null}],[11,"clear","","Clears the piece table, removing all elements.\nAlso removes reference to any given `src`.",0,{"inputs":[{"name":"piecetable"}],"output":null}],[11,"iter","","Return an iterator over all elements of the `PieceTable`.",0,{"inputs":[{"name":"piecetable"}],"output":{"name":"iter"}}],[11,"range","","Return an iterator over the bound range in the `PieceTable`.\nConstructing the iterator takes `O(p)` time, but consuming it is constant time per element.",0,{"inputs":[{"name":"piecetable"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"insert","","Insert an element at `idx`.",0,{"inputs":[{"name":"piecetable"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","Remove the element at the given index.",0,{"inputs":[{"name":"piecetable"},{"name":"usize"}],"output":null}],[11,"push","","Appends an element to the back, efficiently and in constant time.",0,{"inputs":[{"name":"piecetable"},{"name":"t"}],"output":null}],[11,"next","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"piecetable"}}],[11,"extend","","",0,{"inputs":[{"name":"piecetable"},{"name":"i"}],"output":null}],[11,"index","","Note: Reading an index takes `O(p)` time, use iterators for fast sequential access.",0,{"inputs":[{"name":"piecetable"},{"name":"usize"}],"output":{"name":"t"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"piecetable"}}]],"paths":[[3,"PieceTable"],[3,"Iter"],[3,"Range"]]};
initSearch(searchIndex);
